- MVC-2 모델 방식도 새로운 어플리케이션을 개발할 때마다 일일이 처음부터 다시
  개발해야 한다는 단점이 있습니다. 맞죠? 모든 어플리케이션에서 공통적인 기능들을 처음부터
  다시 개발해야 한다는 것은 상당히 비효율적입니다.

- 이보다 더 조은 방법은 뭐가 있을까요? 애플리케이션 개발 시에 일반적인 웹 어플리케이션에서
  많이 사용하는 기능들은 미리 만들어서 제공을 하고, 그 외에 필요한 부분만 추가 및 수정하는
  것이 좋겠죠? 이렇게 하면 훨씬 효율적일 뿐만 아니라 일정한 형식에 따라 개발을 진행하므로
  표준화가 이루어져 생산성도 높일 수 있습니다.

- 애플리케이션은 규모가 커질수록 각 기능을 개발자가 따로 개발하는 것보다는 표준화된 방법으로
  개발하는 것이 유리합니다.

- 자 그러면 프레임워크(framework)란 무엇일까요? 
  프레임워크(framework)의 사전적 의미는 "어떤 것을 구성하는 구조 또는 뼈대" 입니다.
  소프트웨어적 의미로는 "기능을 미리 클래스나 인터페이스 등으로 만들어 제공하는 반제품" 정도로
  해석할 수 있습니다. 즉, 어느 정도 완성된 상태로 제공하는 기능인 셈입니다.

  우리가 현실에서 컴퓨터를 사용하다가 비디오 카드가 고장이 나면 어떻게 하나요? 비디오 카드를 사서
  교체하기만 하면 됩니다. 비디오 카드는 미리 만들어진 상태로 제공이 되죠. 이처럼 프레임워크도
  애플리케이션 개발 시 자주 사용하는 기능을 클래스나 인터페이스 등오로 미리 어느 정도 만들어서 
  제공을 하면 개발자가 자신의 상황에 맞게 변형 및 추가해서 이를 사용하는 것입니다. 그러면 처음부터
  개발할 필요가 없이 자신이 원하는 애플리케이션을 짧은 시간에 만들 수 있겠죠.. 그리고 일정한 틀
  속에서 개발을 하기 때문에 개발 후 유지보수 및 기능의 확장성에서도 고품질이 보장됨.



[스프링 개요]
선수학습 : java, jsp/sevlet, 스크립트언어(html,javascript, jquery, css)

개념 : 자바언어를 기반으로 한 어플리케이션을 제작할 때 효율적으로 빠르게 개발 할 수 있도록
하는 어플리케이션 프레임워크이다.(프로그래밍 틀)

##개발환경 구축

1. JDK 설치(환경변수 설정)

2. Eclipse(Java EE버전), STS (개발 툴 설치)

3. 웹컨테이너 설치 : 톰캣 설치(7.0, 8.0) (이클립스 연동)

	http://tomcat.apache.org

  
4. Eclipse에 스프링(STS) Plugin 설치	
    STS 다운로드 URL 
    https://spring.io/tools

[스프링 프레임워크란?]
 - 스프링은 엔터프라이즈(기업용) 어플리케이션에서 필요로 하는 여러가지 기능들을 제공하는 프레임워크이다.
 - Java EE가 제공하는 기능들을 스프링에서 지원을 하고 있기 때문에 국내에서는 가장 인기 있는 프레임워크로 자리를 잡았다.
 - 스프링은 Java EE에서 제공하는 기능 외에 DI나 AOP와 같은 기능을 지원한다.
 
  ## 스프링 프레임워크 특징
    > 스프링은 경량의 프레임워크
      - 자바의 객체를 담고 있는 컨테이너(IoC 컨테이너).
      - 객체의 생성, 소멸과 같은 생명주기를 관리한다.
  
    > DI(Dependency Injection) : 의존성 주입 패턴을 지원한다.    
      - 설정파일을 통해서 의존관계를 설정해 주는 패턴.
      
    > AOP(Aspect Oriented Programming)을 지원.
      - 트랜잭션이나, 로깅, 보안과 같은 엔터프라이즈 어플리케이션에서 공통으로 필요로 하는 기능을 분리해서 
                각 모듈에 적용할 수 있도록 하는 기능.
    
    > 스프링은 POJO(Plain Old Java Object)를 지원한다.
      - 특정 인터페이스나 클래스를 상속받지 않는 순수한 자바 객체를 스프링 컨테이너가 저장하고 있다.
      
    > 트랜잭션 처리를 위한 일관된 방식을 제공한다.
    
    > 영속성(데이터베이스)과 관련된 다양한 API를 제공한다.
      - JDBC, IBatis, MyBatis, JPA, Hibernate 등과 같은 프레임워크와 연동을 지원한다.



[DI(Dependency Injection) : 의존성 주입]

 > DI 스프링의 핵심 개념 중의 하나이다.
 > 어떤 한 클래스가 다른 클래스의 기능을 사용하려면 당연히 개발자가 직접 코드에서 
      사용할 클래스의 생성자를 호출해서 사용을 하였음. (new 키워드를 이용하여).
      따라서 사용할 클래스와 사용될 클래스의 관계는 개발자에 의해 직접 코드에서 부여가 되었음.
   (의존도가 높음-강한 결합)
 > 객체 사이의 의존 관계를 객체 자신이 아닌 외부(스프링 컨테이너)에서 수행하는 개념.
      즉, 이런 연관 관계를 개발자가 직접 코딩을 통해서 클래스에 부여하는 것이 아니라
      스프링 컨테이너가 연관 관계를 직접 규정하는 것을 말함. 그러면 코드에서 직접적인 
      연관 관계가 발생하지 않으므로 각 클래스들의 변경이 자유로와짐.(약한 결합)
      해설) 전체 애플리케이션은 각각의 기능을 담당하는 컴포넌트들로 구성이 됨. 그리고 
                각 컴포넌트들은 다시 세부 기능을 수행하는 클래스들로 구성됨. 그런데 컴포넌트를
                이루는 클래스들이 다른 클래스의 기능을 사용하게 된다면 어떻게 해야 할까요?
                소스 코드에서 다른 클래스의 생성자를 호출하여 사용할 경우 연관이 있는 모든
                클래스들의 소스 코드를 수정해 주어야 하는 문제가 발생을 하게 됨.
      따라서 스프링 프레임워크에서는 각 클래스들의 연관 관계를 클래스들 사이에서 맺는 것이
      아니라 스프링 프레임워크에서 설정을 통해 맺어줌으로써 클래스들이 연관 관계를 갖지
      않도록 구현을 하였음.
 > 의존관계의 설정은 설정파일(bean.xml)이나 어노테이션을 이용하여 설정을 한다.
 
    // AA 객체에서 BB 객체를 생성. 

	public class AA {
	
		BB bb = new BB();
		
		public void print(){
			bb.aa();
		}
	}
 
	public class BB {
	
		public void aa(){
			System.out.println("BB 객체의 aa() 메소드 입니다!!!");
		}
		
	}
     

    ※ AA는 BB에 의존한다. (AA has a BB)
 
    
   그렇다면 스프링에서의 DI는
     
   의존하는 객체에 대한 획득을 클래스에서 하지 않고, 스프링 컨테이너가 주입(제공)해 준다.
   다시 말하면, 개발자는 AA 클래스에서 BB bb = new BB()를 작성하지 않고
   스프링 컨테이너가 AA 클래스를 생성할 때 생성하는 BB 클래스의 instance(bean)를 주입 받는다.
   
   스프링에서 빈을 담는 그릇을 컨테이너라고 함.
   스프링 기반 애플리케이션에서는 스프링 컨테이너 안에서 객체가 태어나고, 자라고, 소멸함.
   스프링 컨테이너는 객체를 생성하고, 서로 엮어 주고, 이들의 전체 생명주기를 관리함.
   스프링 컨테이너는 스프링 프레임워크의 핵심부에 위치함. 스프링 컨테이너는 종속 객체 주입을
   이용해서 애플리케이션을 구성하는 컴포넌트를 관리하며, 협력 컴포넌트 간 연관 관계의 형성도
   여기에서 이루어짐.
   
   스프링 컨테이너는 여러가지가 있음. 여러 컨테이너 구현체가 존재하며, 이들은 크게 두 가지로 분류됨.
   1. 빈 팩토리(Bean Factory : org.springframework.beans.factory.BeanFactory)
      => DI에 대한 가장 기본적인 지원을 제공하는 가장 단순한 컨테이너임.
   2. 애플리케이션 컨텍스트(Application Context : org.springframework.context.ApplicationContext)
      => 빈 팩토리를 확장해 프로퍼티 파일에 텍스트 메서지를 읽고 애플리케이션 프레임워크 서비스를 제공하는 컨테이너.
         Bean들의 관계 설정 같은 제어를 담당하는 IoC 오브젝트를 BeanFactory라고 한다.
  
    ※ 애플리케이션 컨텍스트
    - 스프링에는 다양한 종류의 애플리케이션 컨텍스트가 존재함. 많이 접하게 컨텍스트는
    * AnnotationConfigApplicationCOntext
      : 하나 이상의 자바 기반 설정 클래스에서 스프링 애플리케이션 컨텍스트를 로드할 때 사용함.
    * AnnotationConfigWebApplicationContext
      : 하나 이상의 자바 기반 설정 클래스에서 스프링 웹 애플리케이션 컨텍스트를 로드할 때 사용함.
    * ClassPathXmlApplicationContext
      : 클래스 패스(classpath)에 위치한 XML 파일에서 컨텍스트 정의 내용을 로드할 때 사용함. 
    * FileSystemXmlApplicationCOntext
      : 파일 시스템에서, 즉 파일 경로로 지정된 XML 파일에서 컨텍스트 정의 내용을 로드할 때 사용함.
    * XmlWebApplicationContext
      : 웹 어플리케이션에 포함된 XML 파일에서 컨텍스트 정의 내용을 로드할 때 사용함.
 
      - 설정은 xml 설정을 통해서 이루어진다.   
 
      - 코드의 변경 없이 xml의 설정만으로 개발자가 원하는 객체의 주입으로 바꿀 수 있음.
   
   
   [의존성 주입 종류]
    - setter(설정 메소드)를 이용한 주입 : 설정 메소드를 사용해서 의존성을 주입하는 것.
    
    - Constructor(생성자)를 통한 주입 : 생성자를 사용해서 의존성을 주입하는 것.
   
   
   [의존성 주입(DI)의 장점]
	- DI를 사용하면 개발 계획시에 시간이 요구가 되지만, 규모가 큰 프로젝트에서 유지보수 업무를 
	   한다면 DI 개발의 장점을 느낄 수 있다. 
   
   
   [의존 관계 설정 방법 - 중요함]
   - XML파일을 이용한 설정 방법.
   
   - JAVA를 이용한 설정 방법(어노테이션을 이용한다. @Configuration, @Bean)
     
            어노테이션(Annotation : Metadata) - JDK 5.0부터 등장한 개념. ex) @Override
                                                                             선언시에는 @를 사용하여 선언한다.
            어노테이션은
     	- 컴파일러에게 정보를 알려주거나
     	- 컴파일 할 때와 설치(deployment - 배포)시의 작업을 지정하거나
     	- 실행(runtime)할 때 별도의 처리가 필요한 경우
           사용한다.
   		
           어노테이션은 클래스, 메소드, 변수 등 모든 요소에 선언이 가능하다.
   		
       # @Configuration : 클래스 앞에 선언하는데, "이 클래스는 스프링 설정에 사용되는 클래스 입니다" 
                                                    라고 알려주는 어노테이션.
       # @Bean : 메소드 앞에 선언, "객체를 생성".
   		
   		
   - XML과 JAVA를 혼용해서 사용하는 방법 : XML파일과 JAVA파일을 같이 사용해서 스프링 설정을 하는 방법.


